/*
 * This source file was generated by the Gradle 'init' task
 */
package taller4;

import java.text.DecimalFormat;

public class App {

    public static void main(String[] args) {

        // Coloque los llamados a cada función de acuerdo con cada enunciado
        // codifique el control de errores para el main
        try {
            System.out.println(Calcular_impares(110));
            System.out.println(Calcular_Fibonacci(10));
            System.out.println(Calcular_suma(15));

            final int lim_inf = 20, lim_sup = 30;
            int aleatorio = (int) (Math.random() * (lim_sup - lim_inf + 1) + lim_inf);
            for (int i = 1; i <= aleatorio; i++) {
                System.out.println(Calcular_raiz());
            }

            System.out.println(Calcular_pares(1, 18));
            System.out.println(Loteria());
        }

        catch (Exception e) {
            System.out.println("Ocurrió un error \n" + e.toString());
        }

    }

    /*
     * TODAS LAS FUNCIONES DEBEN LLEVAR CONTROL DE ERRORES, SI EL ENUNCIADO NO LO
     * ESPECIFICA, LO DEBES PONER
     * DE ACUERDO CON TU CRITERIO
     */

    /*
     * 1. Escriba una función que reciba un entero positivo entre 100 y 500 y
     * retorne en un texto todos los números impares desde 1
     * hasta ese número separados por comas en grupos de hasta 8 números.
     * 
     */

    public static String Calcular_impares(int num) {
        try {

            final int lim_inf = 100, lim_sup = 500, dos = 2, dieciseis = 16;
            String impares = "";

            if (num >= lim_inf && num <= lim_sup) {

                for (int i = 1; i <= num; i++) {

                    if (i % dos != 0)
                        impares += i + ",";

                    else if (i % dieciseis == 0)
                        impares += "\n";

                }
            } else
                return "El número no está dentro del rango";

            return impares;

        }

        catch (Exception e) {
            return "Ocurrió un error inesperado" + e;
        }
    }

    /*
     * 2. Escriba una función que reciba un entero N mayor de 2 y retorne un string
     * cono esos N términos de la
     * serie de Fibonacci (La sucesión de Fibonacci se trata de una serie infinita
     * de números naturales que empieza con un 0 y un 1
     * y continúa añadiendo números que son la suma de los dos anteriores: 0, 1, 1,
     * 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610,
     * 987, 1597…)
     * 
     * 
     */

    public static String Calcular_Fibonacci(int N) {
        try {
            final int lim_N = 2;
            String txt = "0, 1";
            int num_1 = 0, num_2 = 1, resultado = 0;

            if (N > lim_N) {

                for (int i = 1; i <= N - 2; i++) {
                    resultado = num_1 + num_2;
                    txt += ", " + resultado;
                    num_1 = num_2;
                    num_2 = resultado;

                }

            }

            else {
                return "Ingrese un número mayor que 2";
            }

            return txt;
        } catch (Exception e) {
            return "Ocurrió un error inesperado" + e.toString();
        }
    }

    /*
     * 3. Diseñar y desarrollar una función que NO reciba datos de entrada, genere
     * aleatoriamente un número entre 2 y 355,
     * le calcule su raíz cuadrada y retorne este valor. Para calcular las raíces
     * usar la función Sqrt de la biblioteca Math.
     * 
     * En el main, antes de invocar la función, se debe calcular un aleatorio entre
     * 20 y 30 el cual establecerá la cantidad
     * de veces que va a llamar a la función y en un ciclo, mostrar los resultados.
     * 
     */

    public static double Calcular_raiz() {
        try {
            final int lim_inf = 2, lim_sup = 355;
            double alea = Math.random() * (lim_sup - lim_inf + 1) + lim_inf,
                    raiz = Math.sqrt(alea);

            return raiz;
        }

        catch (Exception e) {
            return -1;
        }
    }

    /*
     * 4. Diseñar y desarrollar una función que reciba un valor inicial y un valor
     * final, para generar 900 números aleatorios
     * en este rango y retorne un texto que diga cuántos números pares fueron
     * generados. Controle que el nro inicial sea menor que
     * nro final para establecer el rango.
     * 
     * Llame la función desde el main e imprimir el resultado arrojado.
     */

    public static String Calcular_pares(int v_inicial, int v_final) {
        try {
            final int numeros = 900;
            int alea = 0, contador = 0;
            String pares = "Fueron generados esta cantidad de números pares:";
            if (v_inicial < v_final) {
                for (int i = 1; i <= numeros; i++) {
                    alea = (int) (Math.random() * (v_final - v_inicial + 1) + v_inicial);
                    if (alea % 2 == 0) {
                        contador++;
                    }
                }
            } else {
                return "El v_inicial debe ser menor que el valor final";
            }
            return pares + contador;

        } catch (Exception e) {
            return "Ocurrió un error inesperado" + e.toString();
        }
    }

    /*
     * 5. Diseñar y desarrollar una función que calcule una cantidad de números
     * aleatorios que viene como parámetro de entrada
     * y los sume. La función deberá retornar el total de la suma. Usted defina los
     * rangos que va a usar en el cálculo.
     * 
     * Llame la función desde el main e imprimir el resultado arrojado.
     * 
     * 
     */

    public static int Calcular_suma(int cant) {
        try {
            final int lim_inf = 1, lim_sup = 100, lim_cant = 1000;
            int suma = 0;
            if (cant < lim_cant) {
                for (int i = 1; i <= cant; i++) {
                    int alea = (int) (Math.random() * (lim_sup - lim_inf + 1) + lim_inf);
                    suma += alea;
                }
            } else {
                System.out.println("Ingrese un número menor que 1000");
            }
            return suma;
        } catch (Exception e) {
            return -1;
        }
    }

    /*
     * 6. Se requiere una función para simular el sorteo de una lotería, de acuerdo
     * con las siguientes condiciones:
     * 
     * La lotería tiene 20 premios.
     * 
     * Cada premio que calcula el programa debe tener el número de 4 cifras entre
     * 0000 y 9999 acompañado de la serie
     * que es un número entre 100 y 150.
     * 
     * Ejemplo: 5698-101
     * 
     * Cada premio lo debe imprimir el programa de la siguiente forma (n representa
     * un número cualquiera):
     * 
     * Sorteo # nn - Número Premiado nnnn - Serie nnn
     * 
     * Ejm: Sorteo # 19 - Número Premiado 5698 - Serie 101
     * 
     * Para tener en cuenta la forma en la cual se informan los 20 resultados:
     * 
     * Del premio 20 al 6 el programa imprime:
     * 
     * ======PREMIOS MENORES=======
     * y la lista de los 15 premios
     * 
     * Del premio 5 al 2 el programa imprime:
     * ======PREMIOS SECOS=========
     * y la lista de los 4 premios secos
     * 
     * AL llegar al premio 1, el programa imprime:
     * ======Premio mayor==========
     * Y el premio mayor
     * 
     * Nota: para sacar el premio mayor calcule el random por cada número, como lo
     * hacen en la realidad los sorteos.
     * 
     * La función no recibe parámetros y devuelve un string con toda la lista de
     * premios. El main, invoca la función
     * e imprime el resultado que esta arroje.
     * 
     * 
     * 
     * 
     */

    public static String Loteria() {
        try {
            final int cant_premios = 20, cifra_max = 9999, serie_min = 100, serie_max = 150, seis = 6, dos = 2,
                    cinco = 5;
            String txt = "";

            for (int i = cant_premios; i >= 1; i--) {
                int serie = (int) (Math.random() * (serie_max - serie_min + 1) + serie_min);
                int num_premiado = (int) (Math.random() * (cifra_max + 1));
                DecimalFormat formato_numero = new DecimalFormat("0000");

                if (i >= seis) {
                    if (i == cant_premios) {
                        txt += "======PREMIOS MENORES======= \n";
                    }
                    txt += "Sorteo #" + i + " - Número Premiado " + formato_numero.format(num_premiado) + " - Serie "
                            + serie + "\n";

                } else if (i >= dos) {
                    if (i == cinco) {
                        txt += "======PREMIOS SECOS======= \n";
                    }
                    txt += "Sorteo #" + i + " - Número Premiado " + formato_numero.format(num_premiado) + " - Serie "
                            + serie + "\n";

                } else {
                    txt += "======Premio mayor========== \n";
                    txt += "Sorteo #" + i + " - Número Premiado " + formato_numero.format(num_premiado) + " - Serie "
                            + serie + "\n";

                }
            }

            return txt;
        }

        catch (Exception e) {
            return "Ocurrió un error inesperado: " + e.toString();
        }
    }

}

